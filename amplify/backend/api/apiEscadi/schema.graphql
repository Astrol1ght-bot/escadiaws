# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

enum CourseStatus {
    UPCOMING
    IN_PROGRESS
    FINISHED
}

type Course 
    @model
    @auth(rules: [
        {allow: public, operations: [read], provider: iam},
        {allow: owner, provider: userPools}
        ])
    {
    id: ID!
    name: String!
    thumbnail: AWSURL!
    description: String
    professor: Professor @hasOne
    blocks: [Block] @hasMany 
    fileUploadEnabled: Boolean
    price: Float!
    status: CourseStatus
    purchases: [Purchase] @hasMany
    enrollment: [Enrollment!] @manyToMany(relationName: "EnrollCourses")
}

type Professor
    @model
    @auth(rules: [
        {allow: owner, provider: userPools}
    ])
{
    id: ID!
    name: String!
    courses: [Course] @hasMany
    cognitoId: String!
}

type Block 
@model
@auth(rules: [
    {allow: public, operations: [read]},
    {allow: owner, provider: userPools}
])
{
    id: ID!
    name: String!
    description: String
    course: Course 
    uploadedFiles: [File]
}

type Client
    @model
    @auth(rules: [
        {allow: owner, provider: userPools}
    ])
{
    id: ID!
    name: String!
    email: AWSEmail!
    enrolledCourses: [Enrollment] @hasMany
    purchases: [Purchase] @hasMany
}

type Enrollment
    @model 
    @auth(rules: [
        { allow: owner, provider: userPools }
        ])
{
    id: ID!
    course: [Course!] @manyToMany(relationName: "EnrollCourses")
    client: Client! @belongsTo
    date: AWSDateTime!
    status: EnrollStatus!
    paymentStatus: PaymentStatus!
    paymentType: PaymentType!
    enrollDetails: [EnrollDetail!]!
}

type EnrollDetail {
    courseID: String!
    courseName: String!
    courseThumbnail: String!
    quantity: Int!
    total: Float!
}

type Purchase 
@model
@auth(rules: [
    {allow: owner, provider: userPools}
])
{
    id: ID!
    client: Client!
    course: Course!
    date: String!
}

type File 
@model
@auth(rules: [
    {allow: owner, provider: userPools}
])
{
    id: ID!
    name: String!
    url: String!
    uploadedBy: Client @hasOne
}

enum EnrollStatus {
    processing
    enrolled
    canceled
}

enum PaymentStatus {
    procesing
    acepted
    rejected
    pending
}

enum PaymentType {
    cash
    creditCard
}
